import math
import random
from Replication import *
# Input:  A set of kmers motifs
# Output: Count(motifs)
motifs = [
    "TCGGGGGTTTTT",
    "CCGGTGACTTAC",
    "ACGGGGATTTTC",
    "TTGGGGACTTTT",
    "AAGGGGACTTCC",
    "TTGGGGACTTCC",
    "TCGGGGATTCAT",
    "TCGGGGATTCCT",
    "TAGGGGAACTAC",
    "TCGGGTATAACC"
]

k = 8
t = 5
N = 1000
Text1 = "AACCGGTT"
profile2 = {
    'A': [0.4, 0.3, 0.0, 0.1, 0.0, 0.9],
    'C': [0.2, 0.3, 0.0, 0.4, 0.0, 0.1],
    'G': [0.1, 0.3, 1.0, 0.1, 0.5, 0.0],
    'T': [0.3, 0.1, 0.0, 0.4, 0.5, 0.0]
}
Text2 = "ACGGGGATTACC"

ProfileTestCase1 = {'A': [0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.9, 0.1, 0.1, 0.1, 0.3, 0.0],
                    'C': [0.1, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.1, 0.2, 0.4, 0.6],
                    'G': [0.0, 0.0, 1.0, 1.0, 0.9, 0.9, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0],
                    'T': [0.7, 0.2, 0.0, 0.0, 0.1, 0.1, 0.0, 0.5, 0.8, 0.7, 0.3, 0.4]
                    }

profile = {
    'A': [0.2, 0.2, 0.3, 0.2, 0.3],
    'C': [0.4, 0.3, 0.1, 0.5, 0.1],
    'G': [0.3, 0.3, 0.5, 0.2, 0.4],
    'T': [0.1, 0.2, 0.1, 0.1, 0.2]
}

profile3 = {
    'A': [0.258, 0.197, 0.288, 0.182, 0.364, 0.303, 0.197, 0.227, 0.136, 0.273, 0.258, 0.288, 0.227, 0.303, 0.212],
    'C': [0.242, 0.227, 0.288, 0.242, 0.197, 0.182, 0.364, 0.258, 0.364, 0.091, 0.273, 0.167, 0.197, 0.273, 0.288],
    'G': [0.227, 0.273, 0.212, 0.303, 0.212, 0.273, 0.167, 0.303, 0.242, 0.303, 0.273, 0.288, 0.318, 0.182, 0.364],
    'T': [0.273, 0.303, 0.212, 0.273, 0.227, 0.242, 0.273, 0.212, 0.258, 0.333, 0.197, 0.258, 0.258, 0.242, 0.136]
}

dna = ["GGGTTCACACCCGATAGCAAGCATATGGATTCGTGAAATATTGTAACTTGGGGCGAAGTAAACTAAGCTATTTCCACGTTGCTCTAGAGGTATGTATTTGTGCGAAGCACAGCGCTAACATTCTGAGACAAGTCTAGACTAAGCGGCTCGGGACGAAACATCGCAAGGAGTGGCCGAGATACCCCCTAAACGTATCGAGTACTTCTCGACTAATACTTGTTAACCTCAGGTAATGAGCATACTCTCCTAGTCGGATTAGTCGTTGGGACTAGACTTTCCGTAGACCTACATACCTTTGACGGGGTTCACACCCGAT",
       "AGCAAGCATATGGATTCGTGAAATATTGTAACTTGGGGCGAAGTAAACTAAGCTATTTCCACGTTGCTCTAGAGGTATGTATTTTAGAGCGTTATGGATGTGCGAAGCACAGCGCTAACATTCTGAGACAAGTCTAGACTAAGCGGCTCGGGACGAAACATCGCAAGGAGTGGCCGAGATACCCCCTAAACGTATCGAGTACTTCTCGACTAATACTTGTTAACCTCAGGTAATGAGCATACTCTCCTAGTCGGATTAGTCGTTGGGACTAGACTTTCCGTAGACCTACATACCTTTGACGGGGTTCACACCCGAT",
       "TGGATCAGTGTGAAATAAATGGAAAATACGAGAATACGGAGAGCCTATCCTAGCAACCGTGCCGCAACTGCTACTATTGCCCGCCACTGGAGATGGGCTTTCCGAAAGACACTACGAACCATCGTAAGTATCTACCGAAGATAACTATGACGCGGGGTGCCGCCTCTCAGTAAAGGTTTTGAGGGACTTACGACCATTCGTCAGGATTGAACGGTAGTGCGCGAGGCTTTATCCATCTATGGATGATTAGAATTCAAGAAAATACGCTGTAAATATGGTTTGCTGACCTTGTTCACTCCTAAGGTCGCTGCAAAAT",
       "TGCTGTCAAGTTAGAGGGTTGCGAACGGGCTCCAGCCGGGGCGGGCTGCTATCTGGGTTCACCGTAAAAATTCGGAGATTTGGAAGAACGTATCACTGTAATGTTAAAATAATGAAAAGGTGCTGCCCGCTGGCCGGCTCGTTATAGTGTTATGGAATGTTACTTTCGACGGCCCGTAGGTCTCAAAACTGCGATCTCAGCGCACGGTGGAAGTAGATGGTTATTATACTTATATACTGACTCTAGATTGTTGACTACGAGAAAGAGTACCAGAACTTCACAACCCGGGTAGTCTGGCTGTGGAGTAGTCCCGTTC",
       "AAGGGTAGCGACTCGCTAACGTCTGTCATTACGCGATCAAACGTTCTTATGAAGTTATGGAGACACCCATATCGCATCGATAGGGAGCGTCCGTTAACTGCTGGCATTTCAATACGGGTAACCTTTATGATCCGGTATTGCCGGGCAGACGAGCAGCGTCCTAGCAGTAATTCGAGCTCGACGTCATCGGACCTGGCAACACGACGTGGCACGCGTGAGTAGCACCCAGGTCGCTATTAGCGCCCCTGTAAAGTAACGAGCAAACCATAACACGGGGCCAGTTTCGTGGATTTCACGCCAGTTCTCTGTCGTATAC",
       "TTTTGTTTATCGAATTATGGAAGCGCTCGCCAGGTGTCCGGGGGTTAACACGCAGGATCCTCGTCGGCTAAGAACACAAATGGGATCTTCCGTTAAAGCGTCCGCTAACCCGTCACGATTTCGGTTCCTCGTGTCATTTCACCGATGCCCGCCGGCCCGGAGATATCTTACGAGGAGTTCCCCACAGCGTGTAGCAGGAGTTTGACTAGGAAGACTCGCGGTGGGTGACTTGGGCCACGGATGCGATTAGAACAGTATAGACACCATAGCGGGGTCGGGCAACTCCCTAGTAATAGCCAACCGGAACACTCGCCTC",
       "TATATCACTTATTTATCCCGTTATATTGTCCTATGAAAACGTATCATATCTGCACAATACGCCGCAGTGCGACTTGGAGAGACACACTGCCGACTTTCCACGGATCCATCATACACGCCGCTACGTGGTCAGGGATCACTCAGCATGGTCTAAGTCCTGCTGTTAGTCGCGATGAGTTACCTTTCAAGGACAAAGGCCGCACTGCCATAGCAAGCTCGGGCGGACACAGGGTCGCGTGTGAAATTCACGGAATTGTCTGCACTTGAGAATCCTTCTTTGCAGTTCAATGGCAGGCCACGTGATTCGCCCGGCACGG",
       "ATATGTCCTGCCTCTTCTAATTTAATTTACGCTCTTCAACGACTGGCAATGTGAGGGATACTACCTCCAGCTCAGGACGGACATTGAACTACATGAGGCACATGGTGGCTCGCGTTTGAGGGCCCGGAGCCCAGGGTCGCATTATTATCCTACTATGGACGCTCGAAGCCATTGTGAGTCCGTAATGATAACGATAGTACTCGAGCCACAGCGTGAAACACCAGTACCGTTTAGAAGTGGTGGCTCTGTAACACAACAATTATGACAGCTCAGGCCTATAGCCCTATCGAATGTCGAAAGATCCGCGGATAATGAA",
       "CAGCCTGGTGGAACTCGTGATTCATGTACAAGGACTCGTCAATTCGAAGGTGCGTAAACGTACGTCAGTTTATCCTGTCTCCGACTAGCCTCAAAAGGGGCCGGCTCCCGTTATGGATTCGTTGTTAACATCACCGGCACGACTTTGAGCCAGATCAGTCGATGAGCTTCAGACACAGAGGCGTTCTGCAGCTACAAACGGGCACACTTCGTTGCGCACCCACCGAATGACAATAAACTTGGACCAAAAGGCCATCAATTCAGCGGAGCCAGTCAAGTTCTTCTTCTCATACACATTAACGGATCTTTGTCATGGT",
       "GAGAGTTTTTTATATGATTTCGTACTGTTAAACCTGACACGACCCGGAATAGGCAGCATACCAATGAAGGCCCGTACAACTCTTAGAAGTTATCCCGACCTGGATTCCTAGCAAAGGGTAGATCGCGCTAGGCATCTCACCTCATCTGTCGAAAGAGAACTAACGCTTAGAGCCCTTTCGCAGTGGTAAGCGACAGATGAAATATTCCAAGTGATTTCCGAGCGGAACTTCACCGGCCAGCACAGGGGCTGCAATGAATCAAATTTTTCCGGGGAGGGCGGTGCGATCCCATCCGCGATTAATAAATAAACGACCA",
       "GTTGGTACGAGGTGCTTGTATTCCTTACTAAAGTTCACCACAGGGCGGGTTATGAACCAACTGTTACAGCCGGCATTGCGGCGTGCTTGGCAGTATGCGGAACGCGGACACCTTCTGTTCCGAGAGGTTGTGGAGCTACACTCGCCATCTCGTGGGTGGAAAATGGCTTCACGTTAATGCTCTTATACATAAACTTGGGATGTTATTCGACGACACGATACTCGGTAGGGTGGGTGGGTCGATTATCCCGTGGAGGACGCATAATCGTCCTTCTGTGGGTACGACTTTATGCCCCGCAACACCAATCGCTTACATC",
       "AGAACTATTGCTTCTCAGTCGCCACTGTAAAGGCACCCACAACCAAGACAATGAGTTGGTTATACACTTTGTTTATATGTCGTTTAACGCCCTGTCCTGGATATTTAGAAGAATTAGGACCAATATCTCTATCATATTAGTGTTGGATTATTCATTATCATATTTTATCGGAGAGGTTAGCCCGACCCAGACGGTCCGAACGGACGCAACCAATTTGCCGAATATAAGACTTCATAATATCCTTATCCCGTTGACGATAAGCCTCATGATGCAGGCCTTCCTCAAAAGTGGCATGGCCCTCCTATGAGAAGTACCG",
       "GACTCCGCAGACCTATTCGCTTACGTTCGCGCGCAGGTCCGATACCGAGTAGTATTGCGCCCTCTGTGATGGGGCAACCTCCAAGCGAACGATAGGTGCAACCTAGGAGCATCTACATGTCTGGATACTCCCCTTTACCGTGGCGGGGTCCACCGCTATTAATCGTCTACATGGGGCGTGCTAATAAGCACTTCCCCTAGCGTTTAGAGATACCCCTCCTGTCATTATCTACTTATGGATTTGATTACCTTTTCGACATCCAAGAATTTTCCAGCCTTCCTCGCCCAACAGAGGGGGCTGTCCTCCAAATTTCAAG",
       "CTCCAGACTTAGTTCGTTATGGAGACCGAACGTGTCGCCTACAGACGATAGCCATGTTTTGGACAATACGTAGACAATTTCTCAGAACCCCAGTTTACCCACTGGTAGCAATTGTTATATCATGCTTTTTCATGGGACGAAGCCGTTTTGAGAGCACGGCCGCATGTCATGGCTCCCACAGTAGCCCGCGCTGTCACCGTTATACATTGAACTGATCGATTAGTGTACTGTGCTCGGGATCACCCCAATGTCTGACAACTGGCTACCCTAGCTTACCCGAAGCTCGGGAAGTGAGTGGTAGTCGCTGTACATGTAA",
       "ATAGGCTATGGCCGCTGACCGGGGCTCGGATGTTAGCTGACTCAGTTCACGCTCCTGCACAGTTAGCAGATACCATTGGCATCCATGACATGCAGGAAGCGGCTATCACTATTCGGCCGTTATGGACTACATCAGGAGCCGCCACGCAACGGCACCACCCAGGACCTCGCTGCCAGCCGAATGTCAGTGAGCCACTTGTTCAGACAAGGGCTTCTGTGACCCGGAAGGTGAAATTAACACGCAACAAAGACGTAATCGAACATCCTAGGGTAGAGTGAAACAGCCTGGCCGGTTGACCAACCAGATTGTCTCGAGG",
       "CTCCCAACTAGGCGAGGAGCCCCTTAGGACTCTAATTTCCTACGGTCACCACTCCACCGTATCCTGCTCTGTACAAACACCGATCATTCATCGGTGGCCGCCCTTCACCCTATTATTTGTACCGCGAACCAGGATTGGTATTGTGGACCGGGGCAGCGCTCGGGTGGGAGCCCTCCCGTGTTGCTCTCGGCATGTCGTGAAAACGGTGTACACAGGGCGACACCCGTGGCTACCATAGGATGATACTAGTTGTATAAAATTTGAATGCGGGTTACAGGAGCACGGTATCCCGTTATGTGTCAGTCGCGGTGTGACT",
       "GTGGTCTGGCTCTGGAACACTGCTCAGCTGTGGATCCGCCATACAACTGGCCTCCGAAGGGATTTCTCGGCAACGAGACGTCCCTCCATGCTCGTCCACGCCACCTGCTGGGGCGCGTGTAACGATATGCGTTGTGTCCTTGAGGACCCACTTACAGGGAAACGACACAACCTACAGTCGACAGTTAATGGTCGCACAAGCTTTAAGTACTCCTGCTTCTGATACTACCAGCGTGCATGACCCGGAACAGTAGCCCAAGACGACTGGAGAAGATATTGGAAAATTCGACCTTCTGGGTTATCCCACCATGGACCGG",
       "TTGATGGTCTAGAAACGCACCATTCGTCGAATGGGGAAACAAATCGGTAGAGGCTGACGTTTCGACAAGGGCTCCCAGGTCCATGCGCGTCCTTTATCCCGTTAACAACGCTATCGCACCGACTTGAGCTACAGAGTTCCTTTTTCGTTTCTCTTTCAGCCATCGGGGGGCTGGCAACCAGCGCTCAACCCCCAAAATCGATAACGGAAGGGAAGCCTAGAGGCTTGGATTTGTATTCTGTTGTACTATTGTAAGGTCTGGGAGGAGCACTTTTCCGGAAGGTAGTCGACAAGACAGCAACCGTTGCTTTGGGAAA",
       "CTTTGTACAACGCAATACAAATCCTTTAGGGCCGTCCTGTGCACTGCAAATCCACGTTATAGGTTTCGGCACGAGGGTTCCGAGGTGATGGCCACTGCTTCTTTATGTGACTCGCAGATAGTACTGCTTCAGCCCCAATATTCGCATTTGCCGCTTACCTATGGCATACACGGTAACAGGAATGACCGTAGTGCACACTCCCATTGTAGTTAAGACGAAAATCAAGAGGTAATTATATTTGTGTTATCTCCCCCCGTTATGGATGGTTTTGAGAATACTACTGCACCTCCTAGCGCACGTGGGCTCGCAGACCACC",
       "TTCGCGGTCGCCAATTCCCTACAGTACGGCATTCACTTCTCGCGAGGTGCGCTCTTGATTGGTATGCTGTTACCTCCCAAAGATATCCCGGTGGATGCAAAGCCTCGGCCATGTTAACACTAAAACTCCCAAACCCGGTGAGAGTTCTATATAAGTGGCTCTAGGTAGAGATCTCCCAATATGTTGTCTACACGCAGGGGAATTGGGGGACATGTCAGATCTCAGAACGTAAGGTGGCGCACAACTAAGATAATAGACCATGGCTGAGCATTAGCAGGATTTGAGGAGATCCCGTTATGGGGCAACCAGGCGCATC"]

prof = {"A": [0.8, 0.0, 0.0, 0.2],
        "C": [0.0, 0.6, 0.2, 0.0],
        "G": [0.2, 0.2, 0.8, 0.0],
        "T": [0.0, 0.2, 0.0, 0.8]}

Dna = ["GAAACGAATTGCACAGGTGATTTTCGCCCTTACAAAACCTTCCAAACCGGACGGGCACATTCGGCGGGTACCCTTAGGTCCCAAAGTGCAGGCTAGGCAACAGGACACGCGGCTCTCACTACGTACTTCGGGAATGGTCGCGAGGACCCTAAGTTCGAGGGGCAAATGAGGACATTTAAAACAATGAGAAACGAATTGCACA",
       "GGTGATTCGAGGCTAGACGTGTTTCGCCCTTACAAAACCTTCCAAACCGGACGGGCACATTCGGCGGGTACCCTTAGGTCCCAAAGTGCAGGCTAGGCAACAGGACACGCGGCTCTCACTACGTACTTCGGGAATGGTCGCGAGGACCCTAAGTTCGAGGGGCAAATGAGGACATTTAAAACAATGAGAAACGAATTGCACA",
       "CAAGTTATCGCTGAGGGGCATTGTCCAGAAGGGGTAACAGCCTGTGGGGAGGGCATAATCTTCCGGACGACTCGTATTGAATCCATTTTAAACGCTGCAGCTAGGTATGAGATCTAGAGCATCAATACTAGACGTGGTCTTTGTAAATATCTCCTGCCCGACTACTAATTTGATCTCTCACTAGCACACCAGCAAGCCCGTA",
       "AACGTGTACTGGCGCGACCTCATAGATCAAGGACCATCTGTAAAAGCGCATCTAGCGACACTCACAACAACGAATGGGCTAGGTACCCGCTCGCATCTTAATATCCCTTTGGGGATGAGGTTGGAGCTAATTCTGGCCTGTTCGCAACGCTACGTGATACGCCGTGCGAGATATAATGTCCTGAGTGCGCGCTCTACGTAGC",
       "ATACCGAGTGACCTGGTGATGGTGATTCTTTCGCTGTTCGCAACTAGTGTTGCCTTTCATAGAAAACGGGTACCAGATCGATCGCGAGGCCAAGCACCACTAAGCGATCTAGCGGTTCATCAACCAACATTATTAGTACGTAACTTTCTGAACAGTTTAACCCCCGCACGCTGATCCGCATGAAGATCAGACAACTATGCAT",
       "TCATAATGACTTAGTTTCCTGGCTACCCGGCCAGAGTATGGGGTTTTTGTGTCCAAAATAGTATAACTTGTGCGCGAATCGACCGGGTGCACCGTCTAGGCCCCGCCCAACGCTGCGAGACGATATTTGTGGGCTCGCCCTACTTATAAAAACGTGTTTAGGGTCTAAGACACACTTTAAACTAGACGTGTGAGGTATTGAA",
       "AAGCACAAGGAAGGTTACATAGGAGACCCTACAACTCACGGATCCTTCTACTAAGGGTTTCAGACGTCTAGGTCGCAACTACTTGTGTGGGTATAATACGCTGAAGTGAAGAACACTAACTTCCATGGATCTCCCGAACGTCAGGCATAGCCAAGGAGATTAAGAGAGTTACTCCCCCGTATGCTGAAAGTACATTCTCGGC",
       "ATCTCATGTATCAGGTTAACATAGCGATCGCAAGGCGACGTGATGTTCTTTCTGCCAGCCCGCGGCAGTTCGCGTATCATAGACGCTGGATTAATCCGTTACGCACCGATAGCTCTAAATCTGTCATTTCCGCAGTGGCCAAGGCTCCAGGCGTAGAGAACAGGAAATCCTCGGCGATAAAAGAAATCTAATGTCTATGCGG",
       "CCAGTATACTTCAGGATACCGCATCGAACTGTACAGACAACGTTGATTCACCGGATTGTCCCCCATTCCTAGTAAAATGGCGCGGAAATTGGGCTAGCTCATTAGCCACTAAATTCCCGCGGGGTATTCGCGTATATTTTTATCCATTACATCCGGCCTTTACTGGGGTGCCCGACTAGTTAATCGCAACTGCTCGTGCGGA",
       "AGGTCACCAACGTTCTGTCTAGACGTTTGGGTTACGCGCAAAGTGCCGCTATAGTGCCTGTGGGCTCATGATCGTTAGGAGCTCGTAAAGAAAACCTCTCAGGTAGCTTGGATCTAAGCAACTAGACGTTTTGGTACTCTTCCTTTATAAAACCGGCATGGTGCTTGCTTTCCTCCAGTCAAACTGTGAACGTGATAGCCGC",
       "GATGCCTCACTCGTTGGGAAAGTTCAACTCGCTCATAGACGTGCCTCTTGCAGCACCATATAAGGCGTTCGGCCGCCAATTCCGTGTTCTCCCGCAGGGGATGGGGGAATTCCTTCCCAAACAGTAACACTAACTACCACGCAACTGAAACAAATTAACGTGGGGTGTGTGCCGGCGCATCGTGGTTTCCATCCATATACGC",
       "AGAAAAGTCTAAGTCTGACTCGAGCTCGCTCAATCTATCGAATACTGTTGTATCACCGTGACCGCTAATATTCCACCACGTTGGTCGCCTGTTGAGATTCTCTAAATCCTAGTTCGGGACGCAACTAGACGGATCCCTCATGAAAAGGAGGCGTGACTCAATCTATATGAGTTCTTCCGGCCTCCACCTTTGTCCGTACTAT",
       "TTACGTCTTGCAATGCTGGTTGCATAAATCGCTCGTAGACGTGATAGCTTAGTAGCACTGGACCGACAACGACTTATACCGTTTTTGTTAGAATTCTCTACGTGCTTGAGATTCTAAAGATTTTGAAACCAGAAACTCCAGTACAAGGTGTCGTCCCTCTACGGAGCTGGCGGAACCTACTCGATATTCAGTTAGAAATCGT",
       "GGATTCCACGAAATAGAATGGCAGCGAAATGTACTCGAACGCGCAACCATGATACAGGTAGTCCGTAAAGCTAGTGGTGGTCCACGTCAGTAGGTACTAAGAGTCAAGGGAGACGTCGAGTATTCATCGCTAGCTCCAATGGCCTGCATTCTTATATCGCAACTAGAAAAGCAGCAAGGCCCGACCCACAAGGGCCATGCCA",
       "CATCTAAATGGTAATGTTTAGCGCCCAAGTCAGGCCATCATACAGCTTGGCTGGTACGGAAGTAACACTTCGCTCGTGTGACGTGGGTCCCGTGGTTCTGAAAAGGTTCGCAGGAAGACGTGGGTGGGCTAGATAGGAGAAACCGGGGGGCCCCCCACGCAGCTCTCGGCGATGTCCCAGAGGGTGAGGTTGGTATACCTAG",
       "ACTTCTTCCCCCGTTTTCGAAGCCGTGTTGGAGGCCATGCCTCGTCGATCTTACGGGTCAAAGTCTCGACGCTGCCGGGCCTTGTGCCAGAGCCAATCGTACTAGCTCCATACGTGTTTGGGATGATACCTACGATTGTGCGGAGATCCGTACAAATCTCGCACTGAGACGTGACTGGTGTAAAATCTTTTTCTAGGCGACC",
       "TTCCCACCGGATTTAAGGCGTGAATGATGGGTCGGCGGACAGGCGGCTACCCAACGCTAGATGTGGCTGCGAACCCCCACTCTTTAAGTCTCGCAGAACGCGCCGCGAACGGAAGTATAGACAGGTGGTGACGTCTTCGCGCAACAACCACCGCATTCAACTAGACGTGGGCCACGTCGGGTCAGTAAAACCCGCCGATGTC",
       "GTATAAAGCACTAGAAGGCGCAGACTGGTTAAGGATCACTAGCCACGACATCTAGACATTCTAACAACTCCCCATCGCGCGTCTTCGCAACTAGACTACTGGGCAAATTTGTAAAGTCGGATAAACATGACATGAGGGAGCGCCATTACCCTGTCGTAGACAGAGACGCGGCGTACCGCGTCACGTCAGTCGTATATCGTGG",
       "TTCGGTGCTAGACGTGGCTGGCGGCCCACACTAGAGGCTGCCGGAAAATCAATAACGGGGAACCGAACCTCCCATTGCTAGATTTCTGGAAATACAGTATACGAAGACCCCCCCGAGAAGCCTATGCGATATGAAACCTGAACGTCAAAAGCTTGCCTCTCCTGGCGGGCATCTGGGGGGTAGACAGGGAAGGAATCTGTTG",
       "AGAGTACCCTGTTAGCGAGCCGTTGGACCTGGCCAGATCGCAATATGACGTGGCTTCCACTTTGACTATCATACTCGAACAAACTCTTGGCAGGTTTCTTTACCTCCCAGTTAATTCAATCGCTGGGCTGAGGACGACCCCACTGCACCTCCGCTTCACGAATTTAATCCACACTGGACACTCATGCTTGAATGATAATTCG"
       ]

Dna2 = ["AAACAAAAACATGAGGTCTGTTATTAGAGTCACCCTGCAACTTGCGTGGAATCTATTTTAAAAGATAGTCTCACATGACAACCATGTGTTAGTAACAGACCAACTGGGGATACGCCATCGAGCTCTACTGCCGCTAGCTCATCCACGGTGTTTGATTCCTAGAGGTGTTGTGGGTGCTCTTTGAGCTATTTCAAACAAAAACATGAG",
        "GTCTGTTATTAGAGTCACCCTGCAACTTGCGTGGAATCTATTTTAAGTCACAATCTCCCGAAAGATAGTCTCACATGACAACCATGTGTTAGTAACAGACCAACTGGGGATACGCCATCGAGCTCTACTGCCGCTAGCTCATCCACGGTGTTTGATTCCTAGAGGTGTTGTGGGTGCTCTTTGAGCTATTTCAAACAAAAACATGAG",
        "GCATCAGGAGCAACGCGCTTGTATTCGCCCGGAGAGGTCATCACCGCTGGAGAATATACTGTCCTCGAGTCCCGACTAGTCGCTTGCTTAGTAGAAGATCGTTAAGGGGTGTATCATTGTTGCTAAAACGACGCAAATCAAACTTCACGGCAGGCAGTGTCAACTCAAAAGGTAGTGGAATCCAGAAAATATCAGCGGGCGAAATAC",
        "TTCTCTGTCTTTATAGCCGGTTGAAGACTCCACCGTGTTCGGCCAACATCAGGACCTCCAGTCCTCATCTCCTCTCACCAACCTTAGTCTGCCGATGTCGCTTCTTGATACCCTGAGTGTGTCGCATGCATCCAAGGCAACCGGAGGCGCTCTATGCTCCCAACGTACGCTCTTACCGGCGCCAGTGAAGGACGCTTCGTGCAATGC",
        "GCGTAAAAAGATATAGCAGAGTTTATAACGTTATCAAAGTAACTGTGATCACGTAGAAATTCTCTCGTTATACGCTCCTATGTTGGTCGTCAACTTATGCAAGTCCTCATGGTCCGATAGAACAGAGCCGGATGAGCCCCAGTAAGGCTTAGAAACAACGTGCACGTATCAGAAGTCCTGATCCGATCACAGAAGGTTTGTGGCCTA",
        "TGTTTGTCTTTTCCTGCTCCCAAATATAGCTAAGTCCATAGTCCGCCAGAGTTGCCCTTTAATCGTGAAAGCCGCGTTGATAAGGCCGCCTGGCCCTCTAGACCTCAATCCAGAAATTACCGGGCCCGGGATTTCGGCAGTTGAAACGGACCTGAAACCCGCCGAAGTAGTCCTAGACTCCCGAATATCTATCTAAGCCACGAAGCA",
        "TTTATGCTGCTTAAATCGCGTGGCCACGTCGAGATCTCCCGAACCTCGAGTGCAGCGATGAAGCATTAAGGTCGAGGCGAGAGCACAGTTAGATTAATAGGGATCTTTAGCCACGAGCTCGGTTTGCGATTTAAAGTCCTTACTCTCACCTAAGAGTTCTCCTAAGTGACTTGGTCGACGCACCCACCTCACAATGGCAGTGAAGTC",
        "ACCTGGTTAAATACTCCGCACATAAGCCGAACCGTCTCTCGTTGAAAGCAGCCCGGACTTAGTCCAGGGACGATCCCTATGCAGCAGTACTAGCGCTTTCAACGGTTCGACCCTACGTGAGAGCGAAATCCTCCTCTAATAGCAATTCCTTTTGTCCTCACGACCCGAGGAAGACGCCGTATAGTCGGCAAAGCCCATCGTGCATGA",
        "CGCTCTGCCGGTGTTGCACGCTAGATAGAGATAATCGGCCAGGGAACCGATAGCGTGACAGCGGGTGCGTTCGTGTGTTGCGACTAAAACATTTACCAACGGAGCTCAGCCTACTCTGCATGCGCCTTACTTCGGTGAGCTTACAGGGGATTATCCTTCGACCCACAGAGCGAACCCCAATTGAGCCCGCTGTCCCGCTCTCCCGAG",
        "TTCAGCAATAGTTTCGTTTAATTTTAGCGCTCTGGCGCCTAATTATAATGTGGGTAGGTGAGATCATGATTTGGTATGCCATAGCTATCGCGCACGTTACGGTAAATGTTCGCGCGTCGGGGCGTCTGAATCCTCATCTCCCACCTCTCCTCGAACCCCGTACAAATAGTCTCTTCTTAAAACCCGTTAGCGAGACGGCTGTGCTTA",
        "AGGAACACAGAATAACGCCTTAGAGCCTCCGTCCGTACACTGTAGTCATAGACCAGCCTACTAATCATTGCTTCAACAAGCGCGTGTACAGTAGACCCACAGGAGCCTCATCTCCCGTGGTACGGATGCATTCTTTGGCAGCTACGCGAACTCCCTAAGGTAGGCGGCCATACATGGTGGGTGAAACAGTGATTTCCCAAAAAGCGG",
        "GCTATTCTGTCCTAACAACTTACCATCTATTTAACGCAGGTTGTCTCGGCCACTTTTCCAGCCAACATAGGCGCTAACGGTGACGTACGAAATCAGTATGGTGTCATCTCCCGAATGCTACGATTGTGAACTCAACCGCAGCTCGCCCGCTACCAGCCGCTTGAAGAGCTCCATAGCCAATCTTTTCGGTGCTCTGGTTCCGCGGAC",
        "TAGCGTCCTCCCGTCCCGAACGAGAACACCCTGGTAGCGTCACGGCAGCTAGAAAACCGTGTTACCTAGGCCGACCATATTTAGAACAGATTACTGAAGGGCTCCAACCCACGGCTGTAAGCTCAAAAGCAAAACAAAGTTTGGGGTGCGAGAGTTACGACTCCACACCTTTGGGACAAGTGAAATACTAGAGACAAACAAATCGCT",
        "AGTTCACTAGCAATCTCGCGTCAGTATGCATCTCCCGAATATAGACATTTAGTTCAGGCGCCACTTGGCTCGCAAATTCCTAGTCCACAGAGCAATCCACCTATGTTTGCATTTGAACCATTTTGAGGTAGCCACATTGTGCTCACGGGTAGGGCGGGGCCTATAAACTGCATCTTCTCTAGGAGAAAAATCGGTACCGCACCCTTC",
        "TGGATCGCCCTATAGACGGTGTGGATCAAACCGCTGAGCAGCCACCGTGCAGTCCTCATCATACGAGACGAGGTGATGGTGTACTCAAGAAATACTGACTGGTACTCTTAGCTGAGACCGCGAATGAGCGCGTTCTGTTCATATTAGGAAGATGTGTTGTACGGACTCCGACATTGAGTGCGTGTGCGACCACACGTCAGGCACGTG",
        "TTCGTAAATGACTGTCGCTCATCTCCCGAAGGATGTTCTGAAAAGTCGGCTCTTCGGCCGGTGCGTGTGCCCTGCTGTAGGGCTCCGTCAGCAACGCGGAGGTGTTTGGGGAAAGGGGAATGAGTACCTCAAAACCCGCATACGTTCGGAGAGAGACAGGGTAGTATAAGAACAATCTGCCGTAGGGCCTTGTAGAAGTTGCAGTTT",
        "GTAGCATGATCAGGTGTACCACCAAATGCCTGAGATATGTCGTCAAACGCGCCGCAATACGATATTATGCTTATAAAGTGAAATGCACAGATCCCCCCTAGGCATATTGGGCGGGATGGTGGGTGTTCGGAGTCATTTTTGTTTATTCGGCGGCATCTACCTAACGTGGTCCTCATCTCTTCATAGTCCTAAAATTCGGCGCGTCTG",
        "GCAATCTTGGCCTCCTAATGAGTAGAGAGGCCCGAAAAACACGTTTGAATATCGTCAGTGTGGCCACCTTACATCATCACGATCTCTCAGGTCATCGTAAATGATGTCTTCGCCCATCAGCTACTCGTTACCGAATCTGGACGGTAACTAAACCACGCGAGCTCTTAGCTGTCCTATCCTCCCGAGGTCCACTTTGTCGAAGAGTAA",
        "CCAGAGTTGTAGAGAGGTGAATGAGGAGGGCGCTTCGGTCCAACTCTCCCGACCGTTAACACTTCGACGTGTCAGAACTGCGAAATGACGAACATTGTGGGTCGTCTCAGTACAATACATAGCGGAACAGATAAATTTGATAATTAAAACTCAAGCATCGACAGTCGTGCCCCGTCGATGGTGGGAGTCAAGCAACGCCGAGCTAAC",
        "TGCCTCTGCTACCACTGCGCGTTGGTCGGGCGTGAGAAATGTTGCCCGCCTACGTCTCTCGTCCTTAGGTTTGTTCACCGACATGGGGATGTCGTCCTCATCTGTGGAATAAGCGGCCAACATCCGGCTGTACCCAGTATGTTGCTCCATTATGACATGAAGCCGTTTGGCATGGACTGTTAGTCTTTCAGTTCTTGTAAAACAGTG"]

DNA = ["TGATCTTCGGACGCCAGTCAACGGAACTGGAGGGTCTGTCCTTCGGTCTCCTTTATACATAACGTTCGCTTCGATGTCGAACGATTGCCACCGCCGCTTACGCGGAGGATGGGGAACCCCCTCCTAGACCTCGCTGCAAGTACTTAGTTCGGGACG",
       "GGAGATGGAGCTGAGGTTCGCTTCTACACCTTTCGTCGCCATGTACCTCAGAAACCGTCTCATACCGATTGTACCGACCGCTGAATTTGTGAATGAGAGAAGTAGTTGGTTCGGCACCAAGCGAATAGAGCATTCCGGCGCGGTCAGTTAACGACC",
       "GACGCGAGACTAATATTCTTCCTCACGGATGTTGCGCGCTGGAGGCCCGGCCGAAGTATTACGGCGTACACGCCACAGTCGTCACAGGTTCCCTTCCGCCACCTTCATCCTTGTCATCAATTAGTCGATCGCGGTCTGGTGGAATTGCCTCAAGCA",
       "GTAATTGACGGTACCGTTCGGACTTATCCACGAATGCCCCTCGCAGCTAAGGTTCGCTTGAGGTGAATGCTTATGAGCAGGCAGATCTAGGTGCCGTTTTTGTAGCTGGTTACCGTAGTTAATCGCGTACGCGCTACCAGAGACGAGAAGAGGCAC",
       "CTTAGCGTTGCATAAATAAGGACTGTATTAAGGCCGATCTGCTTTGCCTGATGATATTTATTCAATCGGGATTTTTTTACTATGTATCCCGGCAATACCCGGCCAAGAGATGTTCTCTTGCGTTCCACTGTGTCTGTATAAAGATTGCCGGTCGTC",
       "ACGCATTGGTCATTTTTCCTTGTGTATCCGCTTGATACGGTCTGCCCGGGTTGTTCAAGGGAGGGCTCTTAATTTCAGAATTGCGATTACCTACCTCAAATCACTAGAACCTATAACCGAAATGTTCCCTTAAGTCGCTTATTAGGAAGGGCATAC",
       "ATTAGCTGCGTACCTTGCCCCGGTAATACGCGAAGCAGGCAAACGATCTCCTGCGGACTAGGGGAATTCGTGGACGTTCGCTTACAGATAAGCGACTTCTTTATGTCGGACGCCCAGTCAAGCAGCCCCGTGGTGAAGAGTCGCACACAGACCTTC",
       "CTCACATACGGCTTCGTCGGCGTCCAATTTAGCTATGTGATGATAGAAGTGCTACATTGGCCCGCCAAGGCCTACTCTCAATGCAGACTTTAAGTCGGGTCTAGTCTGATTGATTTTCTGCGTTTTGCAGACCAGCGTCCTGCGGACGTTCACTTG",
       "GAGTGTTTCTATATCAGTACCCATGCGTACAGAAAACGGAGGCGGGAATTGTTGGATAGGAAGGTTCGCTTGCATAATGTACTAGAGTAATTTCTCTACGGTTCAAATGTGCCGTCCGAAGAACTAAACCGTAAGACTCCAACCCACATGAATTAC",
       "GAGGACTTTGTCGGCAAAGCTAGTTATAAGTTTGCTATTAACGAGGAGTTGTGCGCATGTACTTAACAAGGGGTCAATTCGTACGACTTCTCGAGATTTGTGTATATGACTTTTTACCCCTATGTTCTCTTCCCACTGCAGACGCTGAGAAATTCC",
       "CCGTGAGCGACGGCCCAGCGGACCAAATACCCGAGGGAATGGTACTATAACTACGCGTTGATGTTGACTCAAAACGTTCACTTGTAGCGAAGTTTCATCCTCATTCGCGGCTGGAGCAAGGCTCAGAATCACAGACACCAACCCGGATGGTCTGCT",
       "GCGTACAGCTTTGTTTTAAGGGCGAAGGGTTTATGATTGGGGTCCATATCCGGTAAAGGACATGTTCCCTTCTACAAGGAGGCCCAAACTCGTCATCAGACTTCCACTGAGCGAGGAGGAGATGCAATGGGAACAGAGATATGTCTTCTCTACTTA",
       "GAAGTTAACATGCGTTTACAGGCAACGGCTTAAAGGACAGCACTGTAAGCGAAGACCGAGGACGACATATAGCCTAGCACTACTAACCCAAGTCAGCGCGGGTTCACCTACGTTCTCTTAACCGTCCTACCTTGTAACAGTGCTTGATAGGTCGGA",
       "GACCCTCCTAGCCTGTAACACTCTTTTGCGAAGAGACCGACCTGCGGTATTGGTCAGCTAACCGCGCCTTTTTATGAGTCGGTTTTGACGGATGTGAACGTTCACTTTCCTGATGGGACATACTTAGAATTCTCGAGAACAAGTTCATGCCCAAAC",
       "TTCAGCTACGCCTTCCCAGCACGATGGTACTAGGTCGACCCATGACGCGATGTTCGCTTTACCAAAACATACAGACCGCAACACACGTCGTGAGGGCGCGAATAATCCTAGTGCACTACGATAACGAATCCGTCGGACTCTGTGGCAAAGCAACGT",
       "ATCTTGGACGCCCTAAGAAGATCCCATAGTCAAGTGGGAAGCGGCCTCGCGGCACGACTTACGCATGTGAATCTGATAGGCATAACCAAGTACTGAAAAGTTCACTTCTGTCTAGCCCGCGAACCTAAAATAGTTTTGAATTCGTAAAGCGGCCGG",
       "GATCTTGTCTTATATGTGACGACTCCGATATGATATGGAGCACAACGATTTCCATAGAATCATGTTCACTTTAGATTGCTCATCGTATGAGGTTGACCTACACCTAGTTGACCTAATCATTGATGCATTCGCAATATCACGTGTCGTGGGGAGAAC",
       "CCGTATTGCGTGCAGTCCGGTTGCGGACGGAGAATTAGACTAAGGTCACCTCTGAATTCCTAACAAGATTTATGCAGGCTCGGTCACGTTCTCTTGTTCTCACGTCTCTTACACTAAATGTATCTTTACTAGAACTTACATGTGAGGTTACCGATG",
       "TATGTAGGTGAGTTTCTACCACGATGTCGTCCATCCGACAGCGCGGTACCCGATTGAGCCTTAGAATCTTTGGGATTTACTTGTGAGGTTCTCTTGATCTCGTCGACTTGCCATACGAGATTCCCCGTGTCAGGCCTCCGAACGCGACCTTGTGTC",
       "TAAACCACCACATCGGTGGGGGCTCCTGGATTGGTGGTCAAAGATGGTTACGTTCGCTTGCTCAACAACCGCTAAGAAGGGTATCTCATAGATTTCTGTACGATGCAGTGTTCACTCACGGTTGCCGATTATTGTTAGTTCCAGCATTTGGTGCCG",
       "TTCCATATAATGAGGGGTAGATTCATCTCGTCGTTCTGCGAGGGGGCTGACGTTCACTTAGATAGGATATCGGCAGGTCACGTATTTAACTGGTTGGTGTTAATGGTCCCGCCGTCTACTCATCGAACATGTTATAGAGATTAATTAGAGATACCT",
       "CTCTCGACACCAGCAAGTTTTTCTCGTCAAAAAGCGAACGTTCCCTTGCCACGGATGGGTTGATGCAATAAGAGAGGCCGGTAAGCACCAAGGCTACTTAGATCTCTTAGACCGGGCCCCGCCAGGACCACATGGCTAATGTAAAGAATACAGTAC",
       "GTCGTCGATAGGGCGGGGCCTGTCGCGTCACGGGATAAGCTCCAAGATCTATGGTTCAAGAGCCGGGAACTACCGAAAGGGCGGAGAAGACACCGGCTCTGTTCCCTTGGCCGGACCCTTTTGACACACAGAAATATGGGGACTTAGGTTCTCTTT",
       "TGTCTGGGCTTCTATATCATCGCGTAGGGAGAAGCCAGCAATACAGTGAACTCCTATGGGTCGCCTCTAATACATGTTCACTTAAGTAAAACGCTCGACCGGGCTCTGGTTCGGTTATAACGGGGACTGAGGCGAATCCGGTGAACGCGCAATATA",
       "GCCTACTGTTTCAGGCGAACGCAAGTTGCGTAGGTGTGGTAGTTTTAAGACGTTCTCTTAATATAAGTACTCAGCGCGACCAATGCCTTGGCGTGGGTTAACAGGTGCGAGAGTTAGCGGGGTCAACTTTGTGTAGCGCCAATACGTCCTTATGCT"]

a = [0.2, 0.2, 0.9, 0.1, 0.1, 0.1, 0.3]
c = [0.1, 0.6, 0.4, 0.1, 0.2, 0.4, 0.6]
g = [1, 1, 0.9, 0.9, 0.1]
t = [0.7, 0.2, 0.1, 0.1, 0.5, 0.8, 0.7, 0.3, 0.4]

data_list = [a, c, g, t]

lis = {'A': [0.4,  0.3,  0.0,  0.1,  0.0,  0.9],
       'C': [0.2,  0.3,  0.0,  0.4,  0.0,  0.1],
       'G': [0.1,  0.3,  1.0,  0.1,  0.5,  0.0],
       'T': [0.3,  0.1,  0.0,  0.4,  0.5,  0.0]}

prob = {"A": 0.1, "C": 0.1, "G": 0.1, "T": 0.1}

test1 = ["ATGAGGTC",
         "GCCCTAGA",
         "AAATAGAT",
         "TTGTGCTA"]


def Count(motifs):
    """Counts the number of occurences of each nucleotide in each row in a matrix T x K where T is the number of strings in a list 
    of strings and K is the length of the motif (K-mer) whose versions are being compared and returns a dictionary of symbols with 
    the values being a list of their occurences in each position."""
    count = {}  # initializing the count dictionary
    k = len(motifs[0])
    t = len(motifs)
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
            count[symbol].append(0)
    for i in range(t):
        for j in range(k):
            symbol = motifs[i][j]
            count[symbol][j] += 1
    return count


def Profile(motifs):
    """Divides the values of the occurences of each nucleotide in each row by T."""
    t = len(motifs)
    k = len(motifs[0])
    profile = {}
    count = Count(motifs)
    k = len(motifs[0])
    for symbol in "ACGT":
        profile[symbol] = []
        for j in range(k):
            profile[symbol].append(0)
    for symbol in "ACGT":
        for j in range(k):
            numProf = count[symbol][j] / t
            profile[symbol][j] += numProf
    return profile


def Consensus(motifs):
    """Uses the most frequent nucleotide in each position of the motifs matrix to make a consensus motif."""
    k = len(motifs[0])
    count = Count(motifs)
    consensus = ""
    for j in range(k):
        m = 0
        frequentSymbol = ""
        for symbol in "ACGT":
            if count[symbol][j] > m:
                m = count[symbol][j]
                frequentSymbol = symbol
        consensus += frequentSymbol
    return consensus


def Score(motifs):
    """Uses the number of occurences of the less frequent nucleotides in each row to calculate a score for the motif matrix. 
    The lower the score, the more conserved the most frequent nucleotide is, the more likely the consensus will be the most accurate one."""
    t = len(motifs)
    k = len(motifs[0])
    con = Consensus(motifs)
    score = 0
    for j in range(k):
        for i in range(t):
            if motifs[i][j] != con[j]:
                score += 1
    return score


def Pr(Text, profile):
    """Calculates the probability of occurence of a specific motif given a profile matrix."""
    p = 1
    l = len(Text)
    for i in range(l):
        p = p * profile[Text[i]][i]
    return p


def ProfileMostProbablePattern(Text, k, profile):
    """Finds the K-mer with the highest probability of being correct."""
    probDic = {}
    l = len(Text)
    kmers = []
    for i in range(l-k+1):
        Pattern = Text[i:i+k]
        prob = Pr(Pattern, profile)
        probDic[Pattern] = prob
    for i in probDic:
        if probDic[i] == max(probDic.values()):
            kmers.append(i)
    return kmers[0]


def Greedymotifsearch(Dna, k, t):
    """Follows a greedy type of algorithm to find the best scoring motifs from every DNA string"""
    Bestmotifs = []
    for i in range(0, t):
        Bestmotifs.append(Dna[i][0:k])
        n = len(Dna[0])
    for i in range(n-k+1):
        motifs = []
        motifs.append(Dna[0][i:i+k])
        for j in range(1, t):
            P = Profile(motifs[0:j])
            motifs.append(ProfileMostProbablePattern(Dna[j], k, P))
        if Score(motifs) < Score(Bestmotifs):
            Bestmotifs = motifs
    return ' '.join(str(i) for i in Bestmotifs)


def CountWithPseudocounts(motifs):
    count = {}
    t = len(motifs)
    k = len(motifs[0])
    for symbol in "ACGT":
        count[symbol] = []
        for j in range(k):
            count[symbol].append(1)
    for i in range(t):
        for j in range(k):
            symbol = motifs[i][j]
            count[symbol][j] += 1
    return count


def ProfileWithPseudocounts(motifs):
    """Divides the values of the occurences of each nucleotide in each row by T."""
    t = len(motifs)
    k = len(motifs[0])
    profile = {}
    count = CountWithPseudocounts(motifs)
    k = len(motifs[0])
    for symbol in "ACGT":
        profile[symbol] = []
        for j in range(k):
            profile[symbol].append(0)
    for symbol in "ACGT":
        for j in range(k):
            numProf = count[symbol][j] / (t+4)
            profile[symbol][j] += numProf
    return profile


def GreedymotifsearchWithPseudocounts(Dna, k, t):
    Count = CountWithPseudocounts
    Profile = ProfileWithPseudocounts
    Bestmotifs = []
    for i in range(0, t):
        Bestmotifs.append(Dna[i][0:k])
        n = len(Dna[0])
    for i in range(n-k+1):
        motifs = []
        motifs.append(Dna[0][i:i+k])
        for j in range(1, t):
            P = Profile(motifs[0:j])
            motifs.append(ProfileMostProbablePattern(Dna[j], k, P))
        if Score(motifs) < Score(Bestmotifs):
            Bestmotifs = motifs
    return ' '.join(str(i) for i in Bestmotifs)


def Motifs(Profile, Dna):
    """Finds the K-mer with the highest probability of being correct in a list of DNA strings and returns the results in a list."""
    motifs = []
    k = len(Profile["A"])
    for i in Dna:
        motifs.append(ProfileMostProbablePattern(i, k, Profile))
    return motifs


def RandomMotifs(Dna, k, t):
    """Takes a list of strings and outputs a list of random motifs."""
    rand = random.randint(0, len(Dna[0]) - k)
    t = len(Dna)
    randmotifs = []
    for i in range(0, t):
        randmotifs.append(Dna[i][rand:rand+k])
    return randmotifs


def Randomizedmotifsearch(Dna, k, t):
    M = RandomMotifs(Dna, k, t)
    Bestmotifs = M
    while True:
        Profile = ProfileWithPseudocounts(M)
        M = Motifs(Profile, Dna)
        if Score(M) < Score(Bestmotifs):
            Bestmotifs = M
        else:
            return Bestmotifs


def Normalize(Probabilities):
    sumOfValues = sum(Probabilities.values())
    normalized = {}
    for symbol in Probabilities:
        normalized[symbol] = (Probabilities[symbol] / sumOfValues)
    return normalized


def WeightedDie(Probabilities):
    n = random.uniform(0, 1)
    for p in Probabilities:
        n -= Probabilities[p]
        if n <= 0:
            return p


def ProfileGeneratedString(Text, profile, k):
    n = len(Text)
    probabilities = {}
    for i in range(0, n-k+1):
        probabilities[Text[i:i+k]] = Pr(Text[i:i+k], profile)
    probabilities = Normalize(probabilities)
    return WeightedDie(probabilities)


def GibbsSampler(Dna, k, t, N):
    motifs = RandomMotifs(Dna, k, t)
    Bestmotifs = motifs[:]
    for i in range(1, N):
        n = random.randint(0, t-1)
        motifs.pop(n)
        prof = ProfileWithPseudocounts(motifs)
        generate = ProfileGeneratedString(Dna[n], prof, k)
        motifs.insert(n, generate)
        if Score(motifs) < Score(Bestmotifs):
            Bestmotifs = motifs
    return Bestmotifs


"""To run Randomizedmotifsearch(Dna, k, t): N amounts of times:
Bestmotifs = Randomizedmotifsearch(Dna, k, t)
for i in range(N):
    m = Randomizedmotifsearch(Dna, k, t)
    if Score(m) < Score(Bestmotifs):
        Bestmotifs = m"""


def ScoreUsingEntropy(motifs):
    H = 0.0
    data_list = Profile(motifs)
    for j in data_list.values():
        for i in j:
            if i == 0 or i == 0.0:
                H = H+i
            else:
                H = H+i*(math.log(i, 2))
    return -H


def Enumeratemotifs(DNA, k, d):
    """Returns all the motifs (k,d-motifs) from a list of all possible motifs 
    that appear in every string with "d" mismatches.
    subroutines = 1. Neighbors
    Subroutine in = none"""
    setLis = [set() for _ in DNA]
    for pos, string in enumerate(DNA):
        for i in range(len(string)-k+1):
            Pattern = string[i:i+k]
            neighbor = Neighbors(Pattern, d)
            for j in neighbor:
                setLis[pos].add(j)
    Patterns = setLis[0]
    for sets in setLis:
        Patterns = Patterns & sets
    return ' '.join(str(i) for i in Patterns)


def MedianString(DNA, k):
    """Uses every possible Kmer from each DNA and uses it as a MeidanString and calculates a score based on the sum of the minimum
     HammingDistance from each DNA string in the dataset. 
     subroutines: 1. DistanceBetweenPatternAndStrings
     subroutine in: none"""
    kmers = {}
    kmers2 = {}
    for string in DNA:
        for i in range(len(string)-k+1):
            pat = string[i:i+k]
            kmers[pat] = 110
            kmers2[pat] = 0
    for kmer in kmers:
        kmers2[kmer] += DistanceBetweenPatternAndStrings(DNA, kmer)
    minScore = 110
    minKmer = ""
    for kmer, score in kmers2.items():
        if int(score) < minScore:
            minScore = score
            minKmer = kmer
    return minKmer


def DistanceBetweenPatternAndStrings(DNA, Pattern):
    """Checks the HammingDistance between a kmer and every other kmer in every other DNA string
    one string at a time and sums the minimum distance from each string to calculate a score.
    subroutines: 1. HammingDistance
    subroutine in: 1. MedianString"""
    scores = {}
    k = len(Pattern)
    distances = [list() for i in DNA]
    total = 0
    for pos, string in enumerate(DNA):
        scores[pos] = 0
        for i in range(len(string)-k+1):
            pat = string[i:i+k]
            newDistance = HammingDistance(Pattern, pat)
            distances[pos].append(newDistance)
            if pos == len(DNA) - 1 and len(distances[len(DNA)-1]) == len(string)-k+1:
                for i in range(len(distances)):
                    total += min(distances[i])
                    scores[i] += total
                    total = 0
    minScore = 0
    for score in scores.values():
        minScore += score
    return minScore


# Bestmotifs = GibbsSampler(dna, 15, 20, 2000)
# for i in range(20):
#     m = GibbsSampler(dna, 15, 20, 2000)
#     if Score(m) < Score(Bestmotifs):
#         Bestmotifs = m
# print(Randomizedmotifsearch(test1, 3, 4))
